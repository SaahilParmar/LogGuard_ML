version: '3.8'

services:
  # LogGuard ML Main Application
  logguard-ml:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: logguard-ml-app
    restart: unless-stopped
    environment:
      - LOGGUARD_CONFIG_PATH=/app/config/config.yaml
      - LOGGUARD_LOG_LEVEL=INFO
      - LOGGUARD_ENABLE_MONITORING=true
    volumes:
      - ./data:/app/data:ro
      - ./config:/app/config:ro
      - ./reports:/app/reports
      - ./logs:/app/logs
    networks:
      - logguard-network
    depends_on:
      - redis
      - postgres
    command: ["logguard", "monitor", "/app/data", "--config", "/app/config/config.yaml"]

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: logguard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logguard-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-logguard123}

  # PostgreSQL for metadata and results storage
  postgres:
    image: postgres:15-alpine
    container_name: logguard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-logguard_ml}
      POSTGRES_USER: ${POSTGRES_USER:-logguard}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-logguard123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - logguard-network

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: logguard-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - logguard-network
    depends_on:
      - postgres

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: logguard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - logguard-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: logguard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - logguard-network
    depends_on:
      - logguard-ml
      - grafana

  # Log shipping with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: logguard-fluent-bit
    restart: unless-stopped
    volumes:
      - ./monitoring/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logs:/var/log/logguard:ro
    networks:
      - logguard-network
    depends_on:
      - logguard-ml

networks:
  logguard-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
